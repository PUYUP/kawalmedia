# Generated by Django 2.2.6 on 2019-10-07 10:13

import apps.escort.models.models_abstract
import apps.escort.models.models_attribute
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import utils.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('person', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='AttributeOptionGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('label', models.CharField(max_length=128, verbose_name='Label')),
                ('identifier', models.SlugField(max_length=128, null=True, validators=[django.core.validators.RegexValidator(message="Code can only contain the letters a-z, A-Z, digits, and underscores, and can't start with a digit.", regex='^[a-zA-Z_][0-9a-zA-Z_]*$'), utils.validators.non_python_keyword], verbose_name='Identifier')),
            ],
            options={
                'verbose_name': 'Attribute option group',
                'verbose_name_plural': 'Attribute option groups',
                'db_table': 'escort_attribute_option_group',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Classification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('label', models.CharField(db_index=True, max_length=255, verbose_name='Label')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='escort.Classification', verbose_name='Parent classification')),
            ],
            options={
                'verbose_name': 'Classification',
                'verbose_name_plural': 'Classifications',
                'db_table': 'escort_classification',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('label', models.CharField(max_length=255)),
                ('status', models.PositiveIntegerField(choices=[(1, 'Pending'), (2, 'Reviewed'), (3, 'Published'), (4, 'Returned'), (5, 'Rejected'), (6, 'Draft')], default=1)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('protest_count', models.PositiveIntegerField(default=0, editable=False)),
                ('comment_count', models.PositiveIntegerField(default=0, editable=False)),
                ('rating_count', models.PositiveIntegerField(default=0, editable=False)),
                ('classification', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='escort.Classification', verbose_name='Classification')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='creator', to='person.Person')),
            ],
            options={
                'verbose_name': 'Media',
                'verbose_name_plural': 'Medias',
                'db_table': 'escort_media',
                'ordering': ['-date_created'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('label', models.CharField(max_length=128, verbose_name='Label')),
                ('identifier', models.SlugField(help_text='Identifier used for looking up conditional.', max_length=128, unique=True, validators=[django.core.validators.RegexValidator(message="Identifier only contain the letters a-z, A-Z, digits, and underscores, and can't start with a digit.", regex='^[a-zA-Z_][0-9a-zA-Z_]*$')], verbose_name='Identifier')),
                ('required', models.PositiveIntegerField(choices=[(1, 'Required - a value for this option must be specified'), (0, 'Optional - a value for this option can be omitted')], default=1, verbose_name='Status')),
            ],
            options={
                'verbose_name': 'Option',
                'verbose_name_plural': 'Options',
                'db_table': 'escort_option',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Protest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('label', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('status', models.PositiveIntegerField(choices=[(1, 'Pending'), (2, 'Reviewed'), (3, 'Published'), (4, 'Returned'), (5, 'Rejected'), (6, 'Draft')], default=1)),
                ('purpose', models.PositiveIntegerField(choices=[(1, 'Not True'), (2, 'Criticism'), (3, 'Suggestion')], default=3)),
                ('thumbsup_count', models.PositiveIntegerField(default=0, editable=False)),
                ('thumbsdown_count', models.PositiveIntegerField(default=0, editable=False)),
                ('comment_count', models.PositiveIntegerField(default=0, editable=False)),
                ('media', models.ForeignKey(limit_choices_to={'status': 3}, on_delete=django.db.models.deletion.CASCADE, to='escort.Media', verbose_name='Media')),
                ('protester', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='protester', to='person.Person')),
            ],
            options={
                'verbose_name': 'Protest',
                'verbose_name_plural': 'Protests',
                'db_table': 'escort_protest',
                'ordering': ['-date_updated'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProtestProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('status', models.PositiveIntegerField(choices=[(1, 'Pending'), (2, 'Reviewed'), (3, 'Published'), (4, 'Returned'), (5, 'Rejected'), (6, 'Draft')], default=1)),
                ('description', models.TextField(blank=True, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('processor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='protest_processor', to='person.Person')),
                ('protest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='escort.Protest', verbose_name='Protest')),
            ],
            options={
                'verbose_name': 'Protest process',
                'verbose_name_plural': 'Protest process',
                'db_table': 'escort_protest_process',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('description', models.TextField()),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('commenter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='commenter', to='person.Person')),
                ('parent', models.ForeignKey(blank=True, help_text="Only choose a parent comment if you're creating a child comment.  For example if this is a size 4 of a particular t-shirt.  Leave blank if this is a stand-alone comment (i.e. there is only one version of this comment).", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='escort.Comment', verbose_name='Parent comment')),
                ('protest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='escort.Protest', verbose_name='Protest')),
            ],
            options={
                'verbose_name': 'Comment',
                'verbose_name_plural': 'Comments',
                'db_table': 'escort_comment',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProtestAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('featured', models.BooleanField()),
                ('protest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='escort.Protest', verbose_name='Protest')),
            ],
            options={
                'verbose_name': 'Protest attachment',
                'verbose_name_plural': 'Protest attachments',
                'db_table': 'escort_protest_attachment',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('status', models.PositiveIntegerField(choices=[(1, 'Pending'), (2, 'Reviewed'), (3, 'Published'), (4, 'Returned'), (5, 'Rejected'), (6, 'Draft')], default=1)),
                ('description', models.TextField(blank=True, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('media', models.ForeignKey(limit_choices_to={'status': 3}, on_delete=django.db.models.deletion.CASCADE, to='escort.Media', verbose_name='Media')),
                ('processor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='media_processor', to='person.Person')),
            ],
            options={
                'verbose_name': 'Media process',
                'verbose_name_plural': 'Media process',
                'db_table': 'escort_media_process',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media', models.ForeignKey(limit_choices_to={'status': 3}, on_delete=django.db.models.deletion.CASCADE, to='escort.Media', verbose_name='Media')),
            ],
            options={
                'verbose_name': 'Media attachment',
                'verbose_name_plural': 'Media attachments',
                'db_table': 'escort_media_attachment',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='media',
            name='options',
            field=models.ManyToManyField(blank=True, to='escort.Option', verbose_name='Options'),
        ),
        migrations.CreateModel(
            name='CommentAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('featured', models.BooleanField()),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='escort.Comment', verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Protest comment',
                'verbose_name_plural': 'Protest comments',
                'db_table': 'escort_comment_attachment',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AttributeOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('option', models.CharField(max_length=255, verbose_name='Option')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='escort.AttributeOptionGroup', verbose_name='Group')),
            ],
            options={
                'verbose_name': 'Attribute option',
                'verbose_name_plural': 'Attribute options',
                'db_table': 'escort_attribute_option',
                'abstract': False,
                'unique_together': {('group', 'option')},
            },
        ),
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('label', models.CharField(max_length=128, verbose_name='Label')),
                ('identifier', models.SlugField(max_length=128, validators=[django.core.validators.RegexValidator(message="Code can only contain the letters a-z, A-Z, digits, and underscores, and can't start with a digit.", regex='^[a-zA-Z_][0-9a-zA-Z_]*$'), utils.validators.non_python_keyword], verbose_name='Identifier')),
                ('field_type', models.CharField(choices=[('text', 'Text'), ('url', 'URL'), ('integer', 'Integer'), ('boolean', 'True / False'), ('float', 'Float'), ('richtext', 'Rich Text'), ('date', 'Date'), ('datetime', 'Datetime'), ('option', 'Option'), ('multi_option', 'Multi Option'), ('entity', 'Entity'), ('file', 'File'), ('image', 'Image')], default='text', max_length=20, verbose_name='Type')),
                ('required', models.BooleanField(default=False, verbose_name='Required')),
                ('option_group', models.ForeignKey(blank=True, help_text='Select option group if using type "Option" or "Multi Option"', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='media_attributes', to='escort.AttributeOptionGroup', verbose_name='Option Group')),
            ],
            options={
                'verbose_name': 'Attribute',
                'verbose_name_plural': 'Attributes',
                'db_table': 'escort_attribute',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('value_image', models.ImageField(blank=True, max_length=500, null=True, upload_to=apps.escort.models.models_abstract.directory_image_path)),
                ('value_file', models.FileField(blank=True, max_length=500, null=True, upload_to=apps.escort.models.models_abstract.directory_file_path)),
                ('featured', models.BooleanField(null=True)),
                ('caption', models.TextField(blank=True, max_length=500, null=True)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Attachment',
                'verbose_name_plural': 'Attachments',
                'db_table': 'escort_attachment',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Responsible',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('label', models.CharField(max_length=255)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('media', models.ForeignKey(limit_choices_to={'status': 3}, on_delete=django.db.models.deletion.CASCADE, to='escort.Media', verbose_name='Media')),
                ('responser', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='responser', to='person.Person')),
            ],
            options={
                'verbose_name': 'Responsible',
                'verbose_name_plural': 'Responsibles',
                'db_table': 'escort_responsible',
                'ordering': ['-date_created'],
                'abstract': False,
                'unique_together': {('media', 'responser')},
            },
        ),
        migrations.CreateModel(
            name='ProtestThumb',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('protest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='escort.Protest', verbose_name='Protest')),
                ('thumber', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='thumber', to='person.Person')),
            ],
            options={
                'verbose_name': 'Thumb',
                'verbose_name_plural': 'Thumbs',
                'db_table': 'escort_protest_thumb',
                'abstract': False,
                'unique_together': {('thumber', 'protest')},
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('score', models.PositiveIntegerField(choices=[(1, 'Worst'), (2, 'Bad'), (3, 'Fine'), (4, 'Better'), (5, 'Best')])),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('media', models.ForeignKey(limit_choices_to={'status': 3}, on_delete=django.db.models.deletion.CASCADE, to='escort.Media', verbose_name='Media')),
                ('rater', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rater', to='person.Person')),
            ],
            options={
                'verbose_name': 'Rating',
                'verbose_name_plural': 'Ratings',
                'db_table': 'escort_rating',
                'ordering': ['-date_updated'],
                'abstract': False,
                'unique_together': {('media', 'rater')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='media',
            unique_together={('label',)},
        ),
        migrations.CreateModel(
            name='AttributeValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('value_text', models.CharField(blank=True, max_length=255, null=True, verbose_name='Text')),
                ('value_url', models.URLField(blank=True, max_length=500, null=True, verbose_name='URL')),
                ('value_integer', models.IntegerField(blank=True, db_index=True, null=True, verbose_name='Integer')),
                ('value_boolean', models.NullBooleanField(db_index=True, verbose_name='Boolean')),
                ('value_float', models.FloatField(blank=True, db_index=True, null=True, verbose_name='Float')),
                ('value_richtext', models.TextField(blank=True, null=True, verbose_name='Richtext')),
                ('value_date', models.DateField(blank=True, db_index=True, null=True, verbose_name='Date')),
                ('value_datetime', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='DateTime')),
                ('value_file', models.FileField(blank=True, max_length=255, null=True, upload_to=apps.escort.models.models_attribute.entity_directory_file_path)),
                ('value_image', models.ImageField(blank=True, max_length=255, null=True, upload_to=apps.escort.models.models_attribute.entity_directory_image_path)),
                ('object_id', models.PositiveIntegerField(blank=True, editable=False, null=True)),
                ('attribute', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='escort.Attribute', verbose_name='Attribute')),
                ('content_type', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('value_multi_option', models.ManyToManyField(blank=True, related_name='multi_valued_attribute_values', to='escort.AttributeOption', verbose_name='Value multi option')),
                ('value_option', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='escort.AttributeOption', verbose_name='Value option')),
            ],
            options={
                'verbose_name': 'Media attribute value',
                'verbose_name_plural': 'Media attribute values',
                'db_table': 'escort_attribute_value',
                'abstract': False,
                'unique_together': {('attribute', 'content_type', 'object_id')},
            },
        ),
    ]
